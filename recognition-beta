package com.example.testrecognition

import android.app.Activity
import android.content.Intent
import android.graphics.Bitmap
import android.os.Bundle
import android.provider.MediaStore
import android.util.Base64
import android.util.Log
import android.widget.Button
import android.widget.TextView
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.tooling.preview.Preview
import com.example.testrecognition.R.id
import com.example.testrecognition.ui.theme.TestRecognitionTheme
import okhttp3.Call
import okhttp3.Callback
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.RequestBody
import okhttp3.RequestBody.Companion.toRequestBody
import okhttp3.Response
import org.json.JSONObject
import java.io.ByteArrayOutputStream
import java.io.IOException
import java.util.concurrent.TimeUnit

class MainActivity : ComponentActivity() {

    private lateinit var tvResult: TextView
    private lateinit var btnSelectImage: Button
    private val PAT = "a204934077084d83afb2bb8d279bf079"
    private val apiUrl = "https://api.clarifai.com/v2/models/e0be3b9d6a454f0493ac3a30784001ff/outputs"  // Fashion model

    private val pickImage = registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
        if (result.resultCode == Activity.RESULT_OK) {
            result.data?.data?.let { uri ->
                try {
                    val bitmap = MediaStore.Images.Media.getBitmap(contentResolver, uri)
                    processImage(bitmap)
                } catch (e: Exception) {
                    tvResult.text = "Error loading image: ${e.message}"
                }
            }
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        tvResult = findViewById(R.id.tvResult)
        btnSelectImage = findViewById(R.id.btnSelectImage)

        btnSelectImage.setOnClickListener {
            val intent = Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI)
            pickImage.launch(intent)
        }
    }

    private fun processImage(bitmap: Bitmap) {
        try {
            // Scale down image if it's too large
            val maxDimension = 1024
            var scaledBitmap = bitmap
            if (bitmap.width > maxDimension || bitmap.height > maxDimension) {
                val scale = Math.min(
                    maxDimension.toFloat() / bitmap.width,
                    maxDimension.toFloat() / bitmap.height
                )
                scaledBitmap = Bitmap.createScaledBitmap(
                    bitmap,
                    (bitmap.width * scale).toInt(),
                    (bitmap.height * scale).toInt(),
                    true
                )
            }

            val byteArrayOutputStream = ByteArrayOutputStream()
            scaledBitmap.compress(Bitmap.CompressFormat.JPEG, 85, byteArrayOutputStream)
            val imageBytes = byteArrayOutputStream.toByteArray()

            // Check if image size is not too large
            if (imageBytes.size > 10 * 1024 * 1024) { // 10MB limit
                runOnUiThread {
                    tvResult.text = "Image is too large. Please select a smaller image."
                }
                return
            }

            val base64Image = Base64.encodeToString(imageBytes, Base64.NO_WRAP)

            val json = """
                {
                  "user_app_id": {
                    "user_id": "clarifai",
                    "app_id": "main"
                  },
                  "inputs": [
                    {
                      "data": {
                        "image": {
                          "base64": "$base64Image"
                        }
                      }
                    }
                  ]
                }
            """.trimIndent()

            val client = OkHttpClient.Builder()
                .connectTimeout(30, TimeUnit.SECONDS)
                .readTimeout(30, TimeUnit.SECONDS)
                .writeTimeout(30, TimeUnit.SECONDS)
                .build()

            val request = Request.Builder()
                .url(apiUrl)
                .addHeader("Authorization", "Key $PAT")
                .addHeader("Content-Type", "application/json")
                .post(RequestBody.create("application/json".toMediaTypeOrNull(), json))
                .build()

            client.newCall(request).enqueue(object : Callback {
                override fun onFailure(call: Call, e: IOException) {
                    runOnUiThread { tvResult.text = "Network error: ${e.message}" }
                }

                override fun onResponse(call: Call, response: Response) {
                    val body = response.body?.string()
                    runOnUiThread {
                        if (body != null) {
                            try {
                                val jsonObject = JSONObject(body)
                                Log.d("API_RESPONSE", body)
                                if (!response.isSuccessful) {
                                    tvResult.text = "API Error: ${jsonObject.optString("status", "Unknown error")}"
                                    return@runOnUiThread
                                }
                                tvResult.text = extractConcepts(body)
                            } catch (e: Exception) {
                                tvResult.text = "Error parsing response: ${e.message}\nResponse: $body"
                            }
                        } else {
                            tvResult.text = "Empty response from server"
                        }
                    }
                }
            })
        } catch (e: Exception) {
            runOnUiThread {
                tvResult.text = "Error processing image: ${e.message}"
            }
        }
    }

    private fun extractConcepts(json: String): String {
        try {
            val root = JSONObject(json)

            // Check if there's an error in the response
            if (root.has("status") && root.getJSONObject("status").has("code") && root.getJSONObject("status").getInt("code") != 10000) {
                return "API Error: ${root.getJSONObject("status").optString("description", "Unknown error")}"
            }

            val outputs = root.optJSONArray("outputs")
            if (outputs == null || outputs.length() == 0) {
                return "No outputs found in response"
            }

            val firstOutput = outputs.getJSONObject(0)
            val data = firstOutput.optJSONObject("data")
            if (data == null) {
                return "No data found in response"
            }

            val concepts = data.optJSONArray("concepts")
            if (concepts == null || concepts.length() == 0) {
                return "No concepts detected in the image"
            }

            // Get the highest confidence prediction
            var highestConcept: Pair<String, Double>? = null
            for (i in 0 until concepts.length()) {
                val concept = concepts.getJSONObject(i)
                val name = concept.getString("name")
                val value = concept.getDouble("value")
                if (highestConcept == null || value > highestConcept.second) {
                    highestConcept = Pair(name, value)
                }
            }

            return if (highestConcept != null) {
                "I am ${String.format("%.1f", highestConcept.second * 100)}% sure that this is a ${highestConcept.first}"
            } else {
                "No confident predictions found"
            }
        } catch (e: Exception) {
            Log.e("JSON_PARSE_ERROR", "Error parsing JSON: ${e.message}", e)
            return "Error parsing response: ${e.message}"
        }
    }
}
